@*@model IEnumerable<StoreFront.Data.EF.BooksTable>*@
    @model PagedList.IPagedList<StoreFront.Data.EF.BooksTable>
    @using PagedList.Mvc;


    @{
        ViewBag.Title = "Book Search";
    }

    <h2>@ViewBag.Title</h2>

    <div class="container-fluid mt-5 pt-5">
        <row class="topper">
            <section class="BookSearch offset-lg-4 col-7">
                @ViewBag.Title
                @using (Html.BeginForm("BooksMVCPaging", "Filters", FormMethod.Get))
                {
                    <p>
                        Find by Name: @Html.TextBox("SearchString", ViewBag.SearchString as string)
                        <input type="submit" value="search" />
                    </p>
                }

                Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
                @*
                    The code above displays the current page of X number of records (Page Count). We use the tierney operator above in the event
                    that no records are in the Page Count we wont show "Page 1 of 0"
                *@

                @Html.PagedListPager(Model, page => Url.Action("BooksMVCPaging", new { page, searchString = ViewBag.SearchString }));
                @*
                    The code above generates the individual page buttons. It uses the strongly typed collection defined on line 3 of this view.
                    For each page button, we are creating an Url.Action that goes to the BooksMVCPaging method on the Filters controller. It also passes over the next page number.
                *@

            </section>
        </row>
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().BooksTitle)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Price)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().UnitsSold)
                </th>
          
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().AuthorTable.FName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Category.CategoryName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().GenreIDTable.GenreType)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Stock.StockType)
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.BooksTitle)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.UnitsSold)
                    </td>
               
                    <td>
                        @Html.DisplayFor(modelItem => item.AuthorTable.FName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category.CategoryName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.GenreIDTable.GenreType)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Stock.StockType)
                    </td>
                    <td>
                        <a href="@Url.Action("Edit", "BooksTables", new { id=item.BookID })">
                            <i class="fa fa-pencil-square-o action-icons" aria-hidden="true"></i>
                        </a>
                        <a href="@Url.Action("Details", "BooksTables", new { id = item.BookID })">
                            <i class="fa fa-info-circle action-icons" aria-hidden="true"></i>
                        </a>
                        <a href="@Url.Action("Delete", "BooksTables", new { id = item.BookID })">
                            <i class="fa fa-trash-o action-icons" aria-hidden="true"></i>
                        </a>
                    </td>
                </tr>
            }

        </table>
    </div>