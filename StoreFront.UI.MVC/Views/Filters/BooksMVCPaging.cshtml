@*@model IEnumerable<StoreFront.Data.EF.BooksTable>*@
    *@model PagedList.IPagedList<StoreFront.Data.EF.BooksTable>
@using PagedList.Mvc;


@{
    ViewBag.Title = "Book Search";
}

<h2>@ViewBag.Title</h2>


Search
@using (Html.BeginForm("BooksMVCPaging", "Filters", FormMethod.Get))
{
    <p>
        Find by Name: @Html.TextBox("SearchString", ViewBag.SearchString as string)
        <input type="submit" value="search" />
    </p>
}

Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
@*
    The code above displays the current page of X number of records (Page Count). We use the tierney operator above in the event
    that no records are in the Page Count we wont show "Page 1 of 0"
*@

@Html.PagedListPager(Model, page => Url.Action("BooksMVCPaging", new { page, searchString = ViewBag.SearchString }))
@*
    The code above generates the individual page buttons. It uses the strongly typed collection defined on line 3 of this view.
    For each page button, we are creating an Url.Action that goes to the BooksMVCPaging method on the Filters controller. It also passes over the next page number.
*@


<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.BooksTitle)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Price)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.UnitsSold)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PublishDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Publisher)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.BoookImage)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.AuthorTable.FName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Category.CategoryName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.GenreIDTable.GenreType)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Stock.StockType)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.BooksTitle)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UnitsSold)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PublishDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Publisher)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.BoookImage)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AuthorTable.FName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.CategoryName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.GenreIDTable.GenreType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Stock.StockType)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.BookID }) |
                @Html.ActionLink("Details", "Details", new { id = item.BookID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.BookID })
            </td>
        </tr>
    }

</table>
